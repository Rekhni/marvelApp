{"version":3,"file":"static/js/682.a825e307.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain',\n        margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newComicsLoading, setNewComicsLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewComicsLoading(false) : setNewComicsLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true\n        }\n\n        setComicsList((comicsList) => {\n            const comicSet = new Set(comicsList.map(comic => comic.id));\n            const uniqueNewComicsList = newComicsList.filter(comic => !comicSet.has(comic.id));\n            return [...comicsList, ...uniqueNewComicsList];\n        });\n\n        setNewComicsLoading(newComicsLoading => false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderComics(arr) {\n        const items = arr.map((item, i) => {    \n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n    \n        return (\n            <ul className='comics__grid'>\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        \n        <div className=\"comics__list\">\n            {setContent(process, () => renderComics(comicsList), newComicsLoading)}\n            <button \n                disabled={newComicsLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ComicsList from '../comicsList/ComicsList';\nimport AppBanner from '../appBanner/AppBanner.js';\nimport { Helmet } from 'react-helmet';\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>   \n    )\n}\n\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setProcess('loading')\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n\n}\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {request, clearError, process, setProcess} = useHttp(); \n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=3dbd2fb5862bd7966ff316bfe509a824';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset=_baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async(id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getAllComics = async (offset=0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async(id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices.price ? `${comics.prices.price}$` : \"not available\"\n        }\n    }\n\n    return {\n            clearError,\n            process,\n            setProcess,\n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getComic, \n            getCharacterByName\n        }\n}\n\nexport default useMarvelService;\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","newComicsLoading","setNewComicsLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","comicSet","Set","map","comic","id","uniqueNewComicsList","filter","has","arr","items","item","i","Link","to","concat","thumbnail","title","price","renderComics","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}