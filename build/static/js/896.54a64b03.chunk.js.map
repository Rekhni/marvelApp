{"version":3,"file":"static/js/896.54a64b03.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/randomChar/RandomChar.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain',\n        margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import './charList.scss';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect, useRef} from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList((charList) => {\n            const charSet = new Set(charList.map(char => char.id));\n            const uniqueNewCharList = newCharList.filter(char => !charSet.has(char.id));\n            return [...charList, ...uniqueNewCharList];\n        });\n\n        setNewItemLoading(newItemLoading => false);\n        setOffset((offset) => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const handleKeyDown = (event, id, i) => {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            props.onCharSelected(id);\n            focusOnItem(i);\n        }\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        key={item.id} \n                        ref={el => itemRefs.current[i] = el}\n                        tabIndex={0}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyDown={(e) => handleKeyDown(e, item.id, i)}\n                        >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className='char__name'>{item.name}</div>\n                    </li>\n                </CSSTransition>\n\n            )\n        });\n        return (\n            <ul className='char__grid'>\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList)\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}\n                style={{'display' : charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );  \n\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport Spinner from '../spinner/Spinner';\nimport PropTypes from 'prop-types';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId]);\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)    \n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} id={props.charId}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n    \n}\n\nconst View = ({char, id}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <Link to={`/characters/${id}`}  className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character.'}\n                {\n                    comics.map((item, i) => {\n                        const comicId = item.resourceURI.substring(43);\n                        if (i >= 10) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${comicId}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useEffect, useState } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport { Link } from 'react-router-dom';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400  - 1011000) + 1011000);\n        getCharacter(id)\n        .then(onCharLoaded)\n\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div onClick={() => updateChar()} className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n        .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <h2><ErrorMessage/></h2>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport RandomChar from '../randomChar/RandomChar';\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\nimport { useState } from 'react';\nimport decoration from '../../resources/img/vision.png';\nimport { Helmet } from 'react-helmet';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    return (\n        <>  \n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>   \n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div style={{position: 'sticky', top: '0'}}>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img src={decoration} alt=\"vision\" className=\"bg-decoration\" />\n        </>\n    )\n\n}\n\nexport default MainPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n\n}\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {loading, request, error, clearError} = useHttp(); \n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=3dbd2fb5862bd7966ff316bfe509a824';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset=_baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async(id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getAllComics = async (offset=0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async(id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices.price ? `${comics.prices.price}$` : \"not available\"\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, \n        getComic, getCharacterByName}\n}\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","props","charList","setCharList","useState","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","error","getAllCharacters","useMarvelService","useEffect","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","charSet","Set","map","char","id","uniqueNewCharList","filter","has","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","i","imgStyle","thumbnail","CSSTransition","timeout","classNames","children","_jsxs","className","ref","el","tabIndex","onClick","onCharSelected","onKeyDown","e","handleKeyDown","event","key","preventDefault","name","TransitionGroup","component","renderItems","errorMessage","spinner","Spinner","disabled","Skeleton","_Fragment","View","_ref","description","homepage","wiki","comics","href","Link","to","concat","comicId","resourceURI","substring","setChar","getCharacter","clearError","updateChar","charId","onCharLoaded","skeleton","content","RandomChar","timerId","setInterval","clearInterval","Math","floor","random","mjolnir","CharSearchForm","getCharacterByName","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","CharList","position","top","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}