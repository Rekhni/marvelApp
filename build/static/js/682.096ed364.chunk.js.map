{"version":3,"file":"static/js/682.096ed364.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain',\n        margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newComicsLoading, setNewComicsLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewComicsLoading(false) : setNewComicsLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true\n        }\n\n        setComicsList((comicsList) => {\n            const comicSet = new Set(comicsList.map(comic => comic.id));\n            const uniqueNewComicsList = newComicsList.filter(comic => !comicSet.has(comic.id));\n            return [...comicsList, ...uniqueNewComicsList];\n        });\n\n        setNewComicsLoading(newComicsLoading => false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderComics(arr) {\n        const items = arr.map((item, i) => {    \n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n    \n        return (\n            <ul className='comics__grid'>\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderComics(comicsList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newComicsLoading ? <Spinner /> : null;\n\n    return (\n        \n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newComicsLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ComicsList from '../comicsList/ComicsList';\nimport AppBanner from '../appBanner/AppBanner.js';\nimport { Helmet } from 'react-helmet';\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>   \n    )\n}\n\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n\n}\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {loading, request, error, clearError} = useHttp(); \n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=3dbd2fb5862bd7966ff316bfe509a824';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset=_baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async(id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getAllComics = async (offset=0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async(id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices.price ? `${comics.prices.price}$` : \"not available\"\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, \n        getComic, getCharacterByName}\n}\n\nexport default useMarvelService;\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","ComicsList","comicsList","setComicsList","useState","newComicsLoading","setNewComicsLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","comicSet","Set","map","comic","id","uniqueNewComicsList","filter","has","items","arr","item","i","Link","to","concat","thumbnail","title","price","renderComics","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}