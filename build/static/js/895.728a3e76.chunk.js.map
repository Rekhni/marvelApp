{"version":3,"file":"static/js/895.728a3e76.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/randomChar/RandomChar.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain',\n        margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import './charList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect, useRef} from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList((charList) => {\n            const charSet = new Set(charList.map(char => char.id));\n            const uniqueNewCharList = newCharList.filter(char => !charSet.has(char.id));\n            return [...charList, ...uniqueNewCharList];\n        });\n\n        setNewItemLoading(newItemLoading => false);\n        setOffset((offset) => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const handleKeyDown = (event, id, i) => {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            props.onCharSelected(id);\n            focusOnItem(i);\n        }\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n\n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id} \n                    ref={el => itemRefs.current[i] = el}\n                    tabIndex={0}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyDown={(e) => handleKeyDown(e, item.id, i)}\n                    >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className='char__name'>{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className='char__grid'>\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList)\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}\n                style={{'display' : charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );  \n\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport Spinner from '../spinner/Spinner';\nimport PropTypes from 'prop-types';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport { Link } from 'react-router-dom';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId]);\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)    \n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character.'}\n                {\n                    comics.map((item, i) => {\n                        const comicId = item.resourceURI.substring(43);\n                        if (i >= 10) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${comicId}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useEffect, useState } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400  - 1011000) + 1011000);\n        getCharacter(id)\n        .then(onCharLoaded)\n\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div onClick={() => updateChar()} className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <h2><ErrorMessage/></h2>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport RandomChar from '../randomChar/RandomChar';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\nimport { useState } from 'react';\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>   \n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img src={decoration} alt=\"vision\" className=\"bg-decoration\" />\n        </>\n    )\n\n}\n\nexport default MainPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n\n}\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {loading, request, error, clearError} = useHttp(); \n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=3dbd2fb5862bd7966ff316bfe509a824';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset=_baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async(id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset=0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async(id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices.price ? `${comics.prices.price}$` : \"not available\"\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","props","charList","setCharList","useState","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","error","getAllCharacters","useMarvelService","useEffect","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","charSet","Set","map","char","id","uniqueNewCharList","filter","has","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","i","imgStyle","thumbnail","_jsxs","className","ref","el","tabIndex","onClick","onCharSelected","onKeyDown","e","handleKeyDown","event","key","preventDefault","children","name","renderItems","errorMessage","spinner","Spinner","disabled","Skeleton","_Fragment","View","_ref","description","homepage","wiki","comics","href","comicId","resourceURI","substring","Link","to","concat","setChar","getCharacter","clearError","updateChar","charId","onCharLoaded","skeleton","content","RandomChar","timerId","setInterval","clearInterval","Math","floor","random","mjolnir","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}