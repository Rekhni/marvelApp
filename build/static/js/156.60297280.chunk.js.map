{"version":3,"file":"static/js/156.60297280.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain',\n        margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport AppBanner from \"../appBanner/AppBanner\";\n\n// Хотелось бы вынести функцию по загрузке данных как отдельный аргумент\n// Но тогда мы потеряем связь со стэйтами загрузки и ошибки\n// А если вынесем их все в App.js - то они будут одни на все страницы\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\n\n        useEffect(() => {\n            updateData()\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comic':\n                    getComic(id).then(onDataLoaded);\n                    break;\n                case 'character':\n                    getCharacter(id).then(onDataLoaded);\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !data) ? <Component data={data}/> : null;\n\n        return (\n            <>\n                <AppBanner/>\n                {errorMessage}\n                {spinner}\n                {content}\n            </>\n        )\n}\n\nexport default SinglePage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n\n}\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {loading, request, error, clearError} = useHttp(); \n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=3dbd2fb5862bd7966ff316bfe509a824';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset=_baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async(id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getAllComics = async (offset=0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async(id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices.price ? `${comics.prices.price}$` : \"not available\"\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, \n        getComic, getCharacterByName}\n}\n\nexport default useMarvelService;\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}