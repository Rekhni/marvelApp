{"version":3,"file":"static/js/224.e777c2ce.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/randomChar/RandomChar.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain',\n        margin: '0 auto'}} src={img} alt=\"Error\" />\n    )\n}\n\nexport default ErrorMessage;","import './charList.scss';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect, useRef, useMemo} from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList((charList) => {\n            const charSet = new Set(charList.map(char => char.id));\n            const uniqueNewCharList = newCharList.filter(char => !charSet.has(char.id));\n            return [...charList, ...uniqueNewCharList];\n        });\n\n        setNewItemLoading(newItemLoading => false);\n        setOffset((offset) => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const handleKeyDown = (event, id, i) => {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            props.onCharSelected(id);\n            focusOnItem(i);\n        }\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        key={item.id} \n                        ref={el => itemRefs.current[i] = el}\n                        tabIndex={0}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyDown={(e) => handleKeyDown(e, item.id, i)}\n                        >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className='char__name'>{item.name}</div>\n                    </li>\n                </CSSTransition>\n\n            )\n        });\n        return (\n            <ul className='char__grid'>\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}\n                style={{'display' : charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );  \n\n}\n\nexport default CharList;","import './charInfo.scss';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport { Link } from 'react-router-dom';\nimport setContent from '../../utils/setContent';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.charId]);\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)    \n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n    \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki}  className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character.'}\n                {\n                    comics.map((item, i) => {\n                        const comicId = item.resourceURI.substring(43);\n                        // eslint-disable-next-line array-callback-return\n                        if (i >= 10) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${comicId}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useEffect, useState } from 'react';\nimport './randomChar.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400  - 1011000) + 1011000);\n        getCharacter(id)\n        .then(onCharLoaded)\n        .then(() => setProcess('confirmed'))\n\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div onClick={() => updateChar()} className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n        .then(onCharLoaded);\n    }\n\n    const errorMessage = process === 'error'? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <h2><ErrorMessage/></h2>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport RandomChar from '../randomChar/RandomChar';\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\nimport { useState } from 'react';\nimport decoration from '../../resources/img/vision.png';\nimport { Helmet } from 'react-helmet';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    return (\n        <>  \n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>   \n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div style={{position: 'sticky', top: '0'}}>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img src={decoration} alt=\"vision\" className=\"bg-decoration\" />\n        </>\n    )\n\n}\n\nexport default MainPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setProcess('loading')\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n\n}\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\n    const {request, clearError, process, setProcess} = useHttp(); \n    \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=3dbd2fb5862bd7966ff316bfe509a824';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset=_baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacter = async(id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getAllComics = async (offset=0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async(id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices.price ? `${comics.prices.price}$` : \"not available\"\n        }\n    }\n\n    return {\n            clearError,\n            process,\n            setProcess,\n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getComic, \n            getCharacterByName\n        }\n}\n\nexport default useMarvelService;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\nimport Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","props","charList","setCharList","useState","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","process","setProcess","useMarvelService","useEffect","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","charSet","Set","map","char","id","uniqueNewCharList","filter","has","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","renderItems","arr","items","i","imgStyle","thumbnail","CSSTransition","timeout","classNames","children","_jsxs","className","ref","el","tabIndex","onClick","onCharSelected","onKeyDown","e","handleKeyDown","event","key","preventDefault","name","TransitionGroup","component","elements","useMemo","setContent","Component","Spinner","Error","disabled","View","_ref","data","description","homepage","wiki","comics","_Fragment","href","comicId","resourceURI","substring","Link","to","concat","setChar","getCharacter","clearError","updateChar","charId","onCharLoaded","RandomChar","timerId","setInterval","clearInterval","Math","floor","random","mjolnir","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","position","top","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}